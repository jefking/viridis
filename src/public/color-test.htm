<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Averaging Test - Viridis</title>
    <style>
        @import url('https://fonts.googleapis.com/css?family=Proza+Libre|Fira+Mono');
        
        body {
            font-family: 'Proza Libre', sans-serif;
            padding: 20px;
            background: #f5f5f5;
        }
        
        h1 {
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .color-input {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 15px;
        }
        
        input[type="color"] {
            width: 60px;
            height: 40px;
            border: 2px solid #333;
            cursor: pointer;
        }
        
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background: #4169E1;
            color: white;
            border: none;
            border-radius: 4px;
            font-family: 'Proza Libre', sans-serif;
        }
        
        button:hover {
            background: #1E90FF;
        }
        
        button.reset {
            background: #DC143C;
        }
        
        button.reset:hover {
            background: #FF1493;
        }
        
        .timeline {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .color-box {
            width: 120px;
            height: 120px;
            border: 2px solid #333;
            border-radius: 4px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
            opacity: 0.4;
            transition: opacity 0.3s;
        }

        .color-box.active {
            opacity: 1;
            border: 3px solid #4169E1;
            box-shadow: 0 0 10px rgba(65, 105, 225, 0.5);
        }
        
        .color-label {
            background: rgba(255,255,255,0.9);
            padding: 5px 10px;
            border-radius: 4px;
            font-family: 'Fira Mono', monospace;
            font-size: 12px;
            margin-bottom: 5px;
        }
        
        .color-step {
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 11px;
        }
        
        .average-display {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .average-box {
            display: flex;
            gap: 20px;
            align-items: center;
            margin-top: 10px;
        }
        
        .big-color {
            width: 200px;
            height: 200px;
            border: 3px solid #333;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        
        .info {
            flex: 1;
        }
        
        .info h3 {
            margin-top: 0;
        }
        
        .info p {
            margin: 5px 0;
            font-family: 'Fira Mono', monospace;
        }
        
        .comparison {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .comparison-box {
            flex: 1;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽ¨ Color Averaging Test</h1>
        
        <div class="controls">
            <h2>Add Colors</h2>
            <div class="color-input">
                <input type="color" id="colorPicker" value="#0000FF">
                <button onclick="addColor()">Add This Color</button>
                <button class="reset" onclick="reset()">Reset</button>
            </div>
            <div class="color-input">
                <button onclick="addColor('#0000FF')">Add Blue</button>
                <button onclick="addColor('#000000')">Add Black</button>
                <button onclick="addColor('#FF0000')">Add Red</button>
                <button onclick="addColor('#00FF00')">Add Green</button>
                <button onclick="addColor('#FFFF00')">Add Yellow</button>
                <button onclick="addColor('#FFFFFF')">Add White</button>
            </div>
        </div>
        
        <div class="average-display">
            <h2>Current Average</h2>
            <div class="average-box">
                <div class="big-color" id="currentAverage" style="background: #808080;">
                    <div class="color-label" id="avgLabel">#808080</div>
                </div>
                <div class="info">
                    <h3>Statistics</h3>
                    <p>Colors in average: <span id="colorCount">0</span> / 8 (max)</p>
                    <p>Raw RGB Average: <span id="rawAvg">-</span></p>
                    <p>Snapped to Palette: <span id="snappedColor">-</span></p>
                    <p>Distance from raw: <span id="distance">-</span></p>
                    <p><strong>Global Average (from server):</strong> <span id="globalAvg" style="font-family: 'Fira Mono', monospace;">-</span></p>
                    <p><span id="wsStatus" style="color: #999;">WebSocket: Connecting...</span></p>
                    
                    <div class="comparison">
                        <div class="comparison-box" id="rawBox" style="background: #808080;">
                            <strong>Raw Average</strong>
                        </div>
                        <div class="comparison-box" id="snappedBox" style="background: #808080;">
                            <strong>Snapped</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <h2>Color Timeline</h2>
        <div class="timeline" id="timeline">
            <div class="color-box" style="background: #ccc;">
                <div class="color-step">Start</div>
            </div>
        </div>
    </div>
    
    <script>
        // Color palette - same as backend
        const COLOR_PALETTE = [
            0xFF0000, 0xFF4500, 0xFF8C00, 0xFFA500, 0xFFD700, 0xFFFF00,
            0x9ACD32, 0x7FFF00, 0x00FF00, 0x00FA9A, 0x00CED1, 0x00BFFF,
            0x1E90FF, 0x0000FF, 0x4169E1, 0x8A2BE2, 0x9370DB, 0xBA55D3,
            0xFF00FF, 0xFF1493, 0xFF69B4, 0xDC143C, 0xFFFFFF, 0xF0F0F0,
            0xC0C0C0, 0x808080, 0x696969, 0x404040, 0x000000, 0x8B4513,
            0xD2691E, 0xCD853F
        ];
        
        let colors = [];
        const MAX_COLORS = 8; // Only keep the last 8 colors
        let socket = null;

        // Initialize WebSocket connection
        function initWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/color`;

            socket = new WebSocket(wsUrl);

            socket.onopen = () => {
                console.log('WebSocket connected');
                document.getElementById('wsStatus').textContent = 'WebSocket: Connected âœ“';
                document.getElementById('wsStatus').style.color = '#00FA9A';
            };

            socket.onmessage = (event) => {
                const msg = JSON.parse(event.data);
                console.log('WebSocket message:', msg);

                if (msg.average) {
                    const avgColor = msg.average.startsWith('#') ? msg.average : '#' + msg.average;
                    document.getElementById('globalAvg').textContent = avgColor;
                    document.getElementById('globalAvg').style.color = avgColor;
                }
            };

            socket.onerror = (error) => {
                console.error('WebSocket error:', error);
                document.getElementById('wsStatus').textContent = 'WebSocket: Error âœ—';
                document.getElementById('wsStatus').style.color = '#FF0000';
            };

            socket.onclose = () => {
                console.log('WebSocket closed');
                document.getElementById('wsStatus').textContent = 'WebSocket: Disconnected âœ—';
                document.getElementById('wsStatus').style.color = '#FF0000';

                // Attempt to reconnect after 3 seconds
                setTimeout(initWebSocket, 3000);
            };
        }

        function hexToInt(hex) {
            return parseInt(hex.replace('#', ''), 16);
        }
        
        function intToHex(int) {
            return '#' + int.toString(16).toUpperCase().padStart(6, '0');
        }
        
        function colorDistance(color1, color2) {
            const r1 = (color1 >> 16) & 0xFF;
            const g1 = (color1 >> 8) & 0xFF;
            const b1 = color1 & 0xFF;
            
            const r2 = (color2 >> 16) & 0xFF;
            const g2 = (color2 >> 8) & 0xFF;
            const b2 = color2 & 0xFF;
            
            return Math.sqrt(
                Math.pow(r2 - r1, 2) +
                Math.pow(g2 - g1, 2) +
                Math.pow(b2 - b1, 2)
            );
        }
        
        function snapToPalette(colorInt) {
            let minDistance = Infinity;
            let nearestColor = COLOR_PALETTE[0];
            
            for (const paletteColor of COLOR_PALETTE) {
                const distance = colorDistance(colorInt, paletteColor);
                if (distance < minDistance) {
                    minDistance = distance;
                    nearestColor = paletteColor;
                }
            }
            
            return nearestColor;
        }
        
        function calculateAverage() {
            if (colors.length === 0) return { raw: 0x808080, snapped: 0x808080, distance: 0 };
            
            let totalR = 0, totalG = 0, totalB = 0;
            
            for (const colorInt of colors) {
                totalR += (colorInt >> 16) & 0xFF;
                totalG += (colorInt >> 8) & 0xFF;
                totalB += colorInt & 0xFF;
            }
            
            const avgR = Math.round(totalR / colors.length);
            const avgG = Math.round(totalG / colors.length);
            const avgB = Math.round(totalB / colors.length);
            
            const rawAvg = (avgR << 16) | (avgG << 8) | avgB;
            const snapped = snapToPalette(rawAvg);
            const distance = colorDistance(rawAvg, snapped);
            
            return { raw: rawAvg, snapped: snapped, distance: distance };
        }
        
        function addColor(hexColor) {
            const color = hexColor || document.getElementById('colorPicker').value;
            const colorInt = hexToInt(color);
            colors.push(colorInt);

            // Keep only the last 8 colors
            if (colors.length > MAX_COLORS) {
                colors.shift(); // Remove the oldest color
            }

            updateDisplay();
        }
        
        function updateDisplay() {
            const timeline = document.getElementById('timeline');
            const avg = calculateAverage();

            // Update timeline - show all colors but highlight the active ones
            timeline.innerHTML = '';

            // Calculate which colors are "active" (last 8)
            const startIndex = Math.max(0, colors.length - MAX_COLORS);

            colors.forEach((colorInt, index) => {
                const hex = intToHex(colorInt);
                const box = document.createElement('div');
                const isActive = index >= startIndex;
                box.className = 'color-box' + (isActive ? ' active' : '');
                box.style.background = hex;
                box.innerHTML = `
                    <div class="color-label">${hex}</div>
                    <div class="color-step">Step ${index + 1}${!isActive ? ' (dropped)' : ''}</div>
                `;
                timeline.appendChild(box);
            });
            
            // Update current average
            const avgHex = intToHex(avg.snapped);
            const rawHex = intToHex(avg.raw);
            
            document.getElementById('currentAverage').style.background = avgHex;
            document.getElementById('avgLabel').textContent = avgHex;
            document.getElementById('colorCount').textContent = colors.length;
            document.getElementById('rawAvg').textContent = rawHex;
            document.getElementById('snappedColor').textContent = avgHex;
            document.getElementById('distance').textContent = avg.distance.toFixed(2);
            
            // Update comparison boxes
            document.getElementById('rawBox').style.background = rawHex;
            document.getElementById('snappedBox').style.background = avgHex;
            
            // Set text color based on luminance
            const setTextColor = (elementId, hex) => {
                const colorInt = hexToInt(hex);
                const r = (colorInt >> 16) & 0xFF;
                const g = (colorInt >> 8) & 0xFF;
                const b = colorInt & 0xFF;
                const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
                document.getElementById(elementId).style.color = luminance > 0.5 ? '#000' : '#fff';
            };
            
            setTextColor('rawBox', rawHex);
            setTextColor('snappedBox', avgHex);
        }
        
        function reset() {
            colors = [];
            updateDisplay();
        }
        
        // Initialize
        updateDisplay();
        initWebSocket();
    </script>
</body>
</html>

