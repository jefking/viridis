<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colors: Viridis</title>
</head>
<style>
    @import url('https://fonts.googleapis.com/css?family=Proza+Libre|Fira+Mono');

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #app {
        display: flex;
        height: 100%;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        transition: all 2s;

        input {
            padding: 1rem 1rem;
            font-size: 2rem;
            border: 0;
            border-radius: 3px;
            background: #fff;
        }

    }

    h1 {
        font-family: 'Proza Libre', sans-serif;
        color: #fff;
        font-weight: 300;
    }

    p {
        font-family: 'Proza Libre', sans-serif;
        color: #434251;
        font-weight: 300;
    }

    input[type="color"] {
        width: 40px;
        border: 1px solid black;
        margin: 0px;
        padding: 0px !important;
        height: 40px;
    }
</style>

<body>
    <div id="app" v-bind:style="{backgroundColor: displayColor, color: textColor}">
        <h1>Viridis</h1>
        <p>Id: {{ id }}</p>
        <p>Your Color: {{ color }}</p>
        <p>Latitude: {{ lat }}</p>
        <p>Longitude: {{ long }}</p>
        <p v-if="proximityAverage">Nearby Average: {{ proximityAverage }} ({{ nearbyCount }} nearby)</p>
        <p v-if="globalAverage">Global Average: {{ globalAverage }}</p>
        <div class="color">
            <input type="color" v-model="color" @input="updateColor" />
        </div>
    </div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.26/vue.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script lang="javascript">
    new Vue({
        el: '#app',
        data() {
            return {
                id: null,
                lat: 'Requesting...',
                long: 'Requesting...',
                color: '#000000',
                displayColor: '#000000',
                wsColor: null,
                socket: null,
                proximityAverage: null,
                globalAverage: null,
                nearbyCount: 0,
                transitionInterval: null
            };
        },
        computed: {
            textColor() {
                // Calculate luminance to determine if text should be black or white
                const hex = this.displayColor.replace('#', '');
                const r = parseInt(hex.substr(0, 2), 16);
                const g = parseInt(hex.substr(2, 2), 16);
                const b = parseInt(hex.substr(4, 2), 16);

                // Calculate relative luminance (WCAG formula)
                const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

                // Return white for dark colors, black for light colors
                return luminance > 0.5 ? '#000000' : '#FFFFFF';
            }
        },
        created() {
            this.id = this.uuidv4();

            this.socket = new WebSocket('ws://127.0.0.1:9099/ws/color');

            this.socket.onmessage = (event) => {
                const msg = JSON.parse(event.data);
                console.log('WebSocket message received:', msg);

                // Update global average display
                if (msg.average) {
                    const newAverage = msg.average.startsWith('#') ? msg.average : '#' + msg.average;
                    this.globalAverage = newAverage;

                    // Transition to the new global average over 10 seconds
                    // This will restart any existing transition from the current display color
                    if (newAverage !== this.color) {
                        console.log('Server color changed, restarting transition to:', newAverage);
                        this.transitionToColor(newAverage, 10000);
                    }
                }
            };

            const posSuccess = (position) => {
                this.lat = parseFloat(position.coords.latitude.toFixed(6));
                this.long = parseFloat(position.coords.longitude.toFixed(6));
                console.log('Geolocation success:', this.lat, this.long);

                // Now that we have location, get the color with proximity data
                this.getColor(this.id).then((data) => {
                    // Default to global average for initial display
                    if (data.average) {
                        this.globalAverage = data.average;
                        this.displayColor = data.average;
                    } else {
                        this.displayColor = data.color;
                    }
                    this.color = data.color;

                    if (data.proximityAverage) {
                        this.proximityAverage = data.proximityAverage;
                        this.nearbyCount = data.nearbyCount;
                    }
                });
            };

            const posError = (err) => {
                console.error('Geolocation error:', err);
                this.lat = 'Permission denied or unavailable';
                this.long = 'Permission denied or unavailable';

                // Still get color, just without proximity data
                this.getColor(this.id).then((data) => {
                    // Default to global average for initial display
                    if (data.average) {
                        this.globalAverage = data.average;
                        this.displayColor = data.average;
                    } else {
                        this.displayColor = data.color;
                    }
                    this.color = data.color;
                });
            };

            // This will open permission popup
            navigator.geolocation.getCurrentPosition(posSuccess, posError);
        },
        methods: {
            async updateColor(event){
                // Clear any ongoing transition
                if (this.transitionInterval) {
                    clearInterval(this.transitionInterval);
                    this.transitionInterval = null;
                }

                // Transition to the new color over 3 seconds
                this.transitionToColor(this.color, 3000);

                // Only send if we have valid lat/long
                if (typeof this.lat === 'number' && typeof this.long === 'number') {
                    let model = {
                        id: this.id,
                        lat: this.lat,
                        long: this.long,
                        color: this.color
                    };

                    try {
                        const response = await axios.put('/api/color', model);
                        console.log('Color updated:', response.data);

                        // Refresh proximity data
                        const colorData = await this.getColor(this.id);
                        if (colorData.proximityAverage) {
                            this.proximityAverage = colorData.proximityAverage;
                            this.nearbyCount = colorData.nearbyCount;
                        }
                    } catch (error) {
                        console.error('Error updating color:', error);
                    }
                } else {
                    console.warn('Cannot update color without valid geolocation');
                }
            },
            transitionToColor(targetColor, duration = 10000) {
                // Clear any existing transition
                if (this.transitionInterval) {
                    clearInterval(this.transitionInterval);
                }

                const startColor = this.displayColor;
                const steps = 60; // Number of steps for smooth transition
                const stepDuration = duration / steps;
                let currentStep = 0;

                // Parse start and target colors
                const startRGB = this.hexToRgb(startColor);
                const targetRGB = this.hexToRgb(targetColor);

                console.log(`Starting transition from ${startColor} to ${targetColor} over ${duration}ms`);

                this.transitionInterval = setInterval(() => {
                    currentStep++;
                    const progress = currentStep / steps;

                    // Ease-in-out function for smoother transition
                    const easeProgress = progress < 0.5
                        ? 2 * progress * progress
                        : 1 - Math.pow(-2 * progress + 2, 2) / 2;

                    // Interpolate RGB values
                    const r = Math.round(startRGB.r + (targetRGB.r - startRGB.r) * easeProgress);
                    const g = Math.round(startRGB.g + (targetRGB.g - startRGB.g) * easeProgress);
                    const b = Math.round(startRGB.b + (targetRGB.b - startRGB.b) * easeProgress);

                    this.displayColor = this.rgbToHex(r, g, b);

                    if (currentStep >= steps) {
                        clearInterval(this.transitionInterval);
                        this.transitionInterval = null;
                        console.log('Transition complete');
                    }
                }, stepDuration);
            },
            hexToRgb(hex) {
                const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : { r: 0, g: 0, b: 0 };
            },
            rgbToHex(r, g, b) {
                return '#' + [r, g, b].map(x => {
                    const hex = x.toString(16);
                    return hex.length === 1 ? '0' + hex : hex;
                }).join('');
            },
            uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            },
            async getColor(id) {
                let url = '/api/color?id=' + id;

                // Add lat/long if available
                if (typeof this.lat === 'number' && typeof this.long === 'number') {
                    url += '&lat=' + this.lat + '&long=' + this.long;
                }

                const response = await axios.get(url);
                return response.data;
            },
            waitForOpenConnection: function () {
                // We use this to measure how many times we have tried to connect to the websocket server
                // If it fails, it throws an error.
                return new Promise((resolve, reject) => {
                    const maxNumberOfAttempts = 10
                    const intervalTime = 200

                    let currentAttempt = 0
                    const interval = setInterval(() => {
                        if (currentAttempt > maxNumberOfAttempts - 1) {
                            clearInterval(interval)
                            reject(new Error('Maximum number of attempts exceeded.'));
                        } else if (this.socket.readyState === this.socket.OPEN) {
                            clearInterval(interval)
                            resolve()
                        }
                        currentAttempt++
                    }, intervalTime)
                })
            },
            sendMessage: async function (message) {
                // We use a custom send message function, so that we can maintain reliable connection with the
                // websocket server.
                if (this.socket.readyState !== this.socket.OPEN) {
                    try {
                        await this.waitForOpenConnection(this.socket)
                        this.socket.send(message)
                    } catch (err) { console.error(err) }
                } else {
                    this.socket.send(message)
                }
            }

        }
    })
</script>

</html>