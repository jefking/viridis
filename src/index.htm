<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colors: Viridis</title>
</head>
<style>
    @import url('https://fonts.googleapis.com/css?family=Proza+Libre|Fira+Mono');

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #app {
        display: flex;
        height: 100%;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        transition: all 2s;

        input {
            padding: 1rem 1rem;
            font-size: 2rem;
            border: 0;
            border-radius: 3px;
            background: #fff;
        }

    }

    h1 {
        font-family: 'Proza Libre', sans-serif;
        color: #fff;
        font-weight: 300;
    }

    p {
        font-family: 'Proza Libre', sans-serif;
        color: #434251;
        font-weight: 300;
    }

    .color-picker-container {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        margin: 20px 0;
    }

    .color-picker-title {
        font-family: 'Proza Libre', sans-serif;
        font-size: 16px;
        font-weight: 400;
        margin-bottom: 15px;
        color: rgba(255, 255, 255, 0.9);
        text-align: center;
    }

    .palette-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
        max-width: 240px;
        margin: 0 auto;
        justify-items: center;
        align-items: center;
    }

    .palette-color {
        width: 70px;
        height: 70px;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s;
        border: 3px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        position: relative;
        display: block;
    }

    .palette-color:hover {
        transform: scale(1.15);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);
        z-index: 10;
        border-color: rgba(255, 255, 255, 0.5);
    }

    .palette-color:active {
        transform: scale(0.95);
    }

    .color-display {
        display: flex;
        gap: 20px;
        margin: 20px 0;
    }

    .color-square {
        width: 120px;
        height: 120px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        position: relative;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .color-square:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.5);
    }

    .color-square:hover .color-tooltip {
        opacity: 1;
        visibility: visible;
    }

    .color-tooltip {
        position: absolute;
        bottom: -35px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 6px 12px;
        border-radius: 4px;
        font-family: 'Fira Mono', monospace;
        font-size: 14px;
        white-space: nowrap;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.2s, visibility 0.2s;
        pointer-events: none;
    }

    .color-label {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        font-size: 48px;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
        pointer-events: none;
    }

    .throttle-message {
        background: rgba(255, 100, 100, 0.9);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin: 15px 0;
        font-family: 'Proza Libre', sans-serif;
        font-size: 14px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.3s;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .info-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 2px solid rgba(255, 255, 255, 0.3);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: 'Proza Libre', sans-serif;
        font-size: 24px;
        color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .info-button:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    .info-panel {
        position: fixed;
        bottom: 80px;
        right: 20px;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(15px);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        border: 2px solid rgba(255, 255, 255, 0.3);
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
        z-index: 999;
        min-width: 300px;
    }

    .info-panel .color-display {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .info-button:hover + .info-panel,
    .info-panel:hover {
        opacity: 1;
        visibility: visible;
    }

    .info-panel h2 {
        font-family: 'Proza Libre', sans-serif;
        font-size: 20px;
        font-weight: 400;
        margin: 0 0 15px 0;
        color: rgba(255, 255, 255, 0.95);
    }

    .info-panel p {
        font-family: 'Fira Mono', monospace;
        font-size: 13px;
        margin: 8px 0;
        color: rgba(255, 255, 255, 0.9);
        line-height: 1.6;
    }

    .info-panel p strong {
        color: rgba(255, 255, 255, 1);
        font-weight: 500;
    }
</style>

<body>
    <div id="app" v-bind:style="{backgroundColor: displayColor, color: textColor}">
        <div class="color-picker-container">
            <div class="color-picker-title">Select Your Color</div>
            <div class="palette-grid">
                <div
                    v-for="paletteColor in displayedColors"
                    class="palette-color"
                    v-bind:style="{ backgroundColor: paletteColor.hex }"
                    v-bind:title="paletteColor.name + ' - ' + paletteColor.hex"
                    v-on:click="selectColor(paletteColor.hex)">
                </div>
            </div>
        </div>

        <!-- Info button and panel -->
        <div class="info-button">i</div>
        <div class="info-panel">
            <h2>Viridis</h2>
            <p><strong>Id:</strong> {{ id }}</p>
            <p><strong>Latitude:</strong> {{ lat }}</p>
            <p><strong>Longitude:</strong> {{ long }}</p>
            <p v-if="proximityAverage"><strong>Nearby:</strong> {{ nearbyCount }} within 50km</p>

            <div class="color-display">
                <div class="color-square" v-bind:style="{backgroundColor: color}">
                    <div class="color-label">üë§</div>
                    <div class="color-tooltip">{{ color }}</div>
                </div>
                <div class="color-square" v-if="globalAverage" v-bind:style="{backgroundColor: globalAverage}">
                    <div class="color-label">üåç</div>
                    <div class="color-tooltip">{{ globalAverage }}</div>
                </div>
            </div>
        </div>
    </div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.26/vue.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script lang="javascript">
    new Vue({
        el: '#app',
        data() {
            return {
                id: null,
                lat: 49.2827,  // Default to Vancouver, BC, Canada
                long: -123.1207,
                color: '#000000',
                displayColor: '#000000',
                wsColor: null,
                socket: null,
                proximityAverage: null,
                globalAverage: null,
                nearbyCount: 0,
                transitionInterval: null,
                connectionFailed: false,
                rainbowInterval: null,
                palette: [],  // Will be loaded from server
                displayedColors: []  // 9 randomly selected colors to display
            };
        },
        computed: {
            textColor() {
                // Calculate luminance to determine if text should be black or white
                const hex = this.displayColor.replace('#', '');
                const r = parseInt(hex.substr(0, 2), 16);
                const g = parseInt(hex.substr(2, 2), 16);
                const b = parseInt(hex.substr(4, 2), 16);

                // Calculate relative luminance (WCAG formula)
                const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

                // Return white for dark colors, black for light colors
                return luminance > 0.5 ? '#000000' : '#FFFFFF';
            }
        },
        created() {
            this.id = this.uuidv4();

            // Load color palette from server
            this.loadPalette();

            // Load global color immediately on page load
            this.loadInitialColor();

            this.socket = new WebSocket('ws://127.0.0.1:9099/ws/color');

            this.socket.onerror = (error) => {
                console.error('WebSocket error:', error);
                this.connectionFailed = true;
                this.startRainbow();
            };

            this.socket.onclose = () => {
                console.warn('WebSocket closed');
                this.connectionFailed = true;
                this.startRainbow();
            };

            this.socket.onmessage = (event) => {
                const msg = JSON.parse(event.data);
                console.log('WebSocket message received:', msg);

                // Connection successful, stop rainbow if running
                if (this.connectionFailed) {
                    this.connectionFailed = false;
                    this.stopRainbow();
                }

                // Update global average display
                if (msg.average) {
                    const newAverage = msg.average.startsWith('#') ? msg.average : '#' + msg.average;
                    this.globalAverage = newAverage;

                    // Transition to the new global average over 10 seconds
                    // This will restart any existing transition from the current display color
                    if (newAverage !== this.color) {
                        console.log('Server color changed, restarting transition to:', newAverage);
                        this.transitionToColor(newAverage, 10000);
                    }
                }
            };

            const posSuccess = (position) => {
                this.lat = parseFloat(position.coords.latitude.toFixed(6));
                this.long = parseFloat(position.coords.longitude.toFixed(6));
                console.log('Geolocation success:', this.lat, this.long);

                // Now that we have location, get proximity data
                this.getColor(this.id).then((data) => {
                    if (data.proximityAverage) {
                        this.proximityAverage = data.proximityAverage;
                        this.nearbyCount = data.nearbyCount;
                    }
                });
            };

            const posError = (err) => {
                console.error('Geolocation error:', err);
                // Default to Vancouver, BC, Canada
                this.lat = 49.2827;
                this.long = -123.1207;
                console.log('Using default location: Vancouver, BC, Canada');
            };

            // This will open permission popup
            navigator.geolocation.getCurrentPosition(posSuccess, posError);
        },
        methods: {
            async loadPalette() {
                try {
                    const response = await axios.get('/api/palette');
                    this.palette = response.data.colors;
                    console.log(`Loaded ${this.palette.length} colors from palette`);

                    // Randomly select 9 colors to display
                    this.displayedColors = this.getRandomColors(9);

                    // Set initial color to first displayed color
                    if (this.displayedColors.length > 0) {
                        this.color = this.displayedColors[0].hex;
                    }
                } catch (error) {
                    console.error('Error loading palette:', error);
                }
            },
            getRandomColors(count) {
                // Fisher-Yates shuffle for proper randomization
                const shuffled = [...this.palette];
                for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                }
                // Take first 'count' colors (guaranteed to be distinct)
                return shuffled.slice(0, count);
            },
            selectColor(hexColor) {
                this.color = hexColor;
                this.updateColor();
            },
            async updateColor(event){
                // Clear any ongoing transition
                if (this.transitionInterval) {
                    clearInterval(this.transitionInterval);
                    this.transitionInterval = null;
                }

                const selectedColor = this.color;

                // Step 1: Transition to the selected color over 2 seconds
                await this.transitionToColor(selectedColor, 2000);

                // Step 2: After 2 seconds, transition to global average over 8 seconds
                if (this.globalAverage && this.globalAverage !== selectedColor) {
                    console.log(`Transitioning from selected color ${selectedColor} to global average ${this.globalAverage}`);
                    this.transitionToColor(this.globalAverage, 8000);
                }

                // Only send if we have valid lat/long
                if (typeof this.lat === 'number' && typeof this.long === 'number') {
                    let model = {
                        id: this.id,
                        lat: this.lat,
                        long: this.long,
                        color: selectedColor
                    };

                    try {
                        const response = await axios.put('/api/color', model);
                        console.log('Color updated:', response.data);

                        // Refresh proximity data
                        const colorData = await this.getColor(this.id);
                        if (colorData.proximityAverage) {
                            this.proximityAverage = colorData.proximityAverage;
                            this.nearbyCount = colorData.nearbyCount;
                        }
                    } catch (error) {
                        // Handle throttle error (429) - just log to console
                        if (error.response && error.response.status === 429) {
                            const data = error.response.data;
                            console.log(`Throttled: ${data.message}`);
                        } else {
                            console.error('Error updating color:', error);
                        }
                    }
                } else {
                    console.warn('Cannot update color without valid geolocation');
                }
            },
            transitionToColor(targetColor, duration = 10000) {
                // Clear any existing transition
                if (this.transitionInterval) {
                    clearInterval(this.transitionInterval);
                }

                return new Promise((resolve) => {
                    const startColor = this.displayColor;
                    const steps = 60; // Number of steps for smooth transition
                    const stepDuration = duration / steps;
                    let currentStep = 0;

                    // Parse start and target colors
                    const startRGB = this.hexToRgb(startColor);
                    const targetRGB = this.hexToRgb(targetColor);

                    console.log(`Starting transition from ${startColor} to ${targetColor} over ${duration}ms`);

                    this.transitionInterval = setInterval(() => {
                        currentStep++;
                        const progress = currentStep / steps;

                        // Ease-in-out function for smoother transition
                        const easeProgress = progress < 0.5
                            ? 2 * progress * progress
                            : 1 - Math.pow(-2 * progress + 2, 2) / 2;

                        // Interpolate RGB values
                        const r = Math.round(startRGB.r + (targetRGB.r - startRGB.r) * easeProgress);
                        const g = Math.round(startRGB.g + (targetRGB.g - startRGB.g) * easeProgress);
                        const b = Math.round(startRGB.b + (targetRGB.b - startRGB.b) * easeProgress);

                        this.displayColor = this.rgbToHex(r, g, b);

                        if (currentStep >= steps) {
                            clearInterval(this.transitionInterval);
                            this.transitionInterval = null;
                            console.log('Transition complete');
                            resolve();
                        }
                    }, stepDuration);
                });
            },
            hexToRgb(hex) {
                const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : { r: 0, g: 0, b: 0 };
            },
            rgbToHex(r, g, b) {
                return '#' + [r, g, b].map(x => {
                    const hex = x.toString(16);
                    return hex.length === 1 ? '0' + hex : hex;
                }).join('');
            },
            uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            },
            async getColor(id) {
                let url = '/api/color?id=' + id;

                // Add lat/long if available
                if (typeof this.lat === 'number' && typeof this.long === 'number') {
                    url += '&lat=' + this.lat + '&long=' + this.long;
                }

                const response = await axios.get(url);
                return response.data;
            },
            async loadInitialColor() {
                try {
                    const data = await axios.get('/api/color?id=' + this.id);
                    if (data.data.average) {
                        this.globalAverage = data.data.average;
                        this.displayColor = data.data.average;
                        console.log('Initial global color loaded:', this.globalAverage);
                    }
                    if (data.data.color) {
                        this.color = data.data.color;
                    }
                } catch (error) {
                    console.error('Failed to load initial color:', error);
                    this.connectionFailed = true;
                    this.startRainbow();
                }
            },
            startRainbow() {
                if (this.rainbowInterval) return; // Already running

                let hue = 0;
                this.rainbowInterval = setInterval(() => {
                    hue = (hue + 1) % 360;
                    this.displayColor = `hsl(${hue}, 100%, 50%)`;
                }, 50); // Update every 50ms for smooth animation

                console.log('Rainbow mode activated - connection failed');
            },
            stopRainbow() {
                if (this.rainbowInterval) {
                    clearInterval(this.rainbowInterval);
                    this.rainbowInterval = null;
                    console.log('Rainbow mode deactivated - connection restored');
                }
            },
            waitForOpenConnection: function () {
                // We use this to measure how many times we have tried to connect to the websocket server
                // If it fails, it throws an error.
                return new Promise((resolve, reject) => {
                    const maxNumberOfAttempts = 10
                    const intervalTime = 200

                    let currentAttempt = 0
                    const interval = setInterval(() => {
                        if (currentAttempt > maxNumberOfAttempts - 1) {
                            clearInterval(interval)
                            reject(new Error('Maximum number of attempts exceeded.'));
                        } else if (this.socket.readyState === this.socket.OPEN) {
                            clearInterval(interval)
                            resolve()
                        }
                        currentAttempt++
                    }, intervalTime)
                })
            },
            sendMessage: async function (message) {
                // We use a custom send message function, so that we can maintain reliable connection with the
                // websocket server.
                if (this.socket.readyState !== this.socket.OPEN) {
                    try {
                        await this.waitForOpenConnection(this.socket)
                        this.socket.send(message)
                    } catch (err) { console.error(err) }
                } else {
                    this.socket.send(message)
                }
            }

        }
    })
</script>

</html>