<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colors: Viridis</title>
</head>
<style>
    @import url('https://fonts.googleapis.com/css?family=Proza+Libre|Fira+Mono');

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #app {
        display: flex;
        height: 100%;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        transition: all 2s;

        input {
            padding: 1rem 1rem;
            font-size: 2rem;
            border: 0;
            border-radius: 3px;
            background: #fff;
        }

    }

    h1 {
        font-family: 'Proza Libre', sans-serif;
        color: #fff;
        font-weight: 300;
    }

    p {
        font-family: 'Proza Libre', sans-serif;
        color: #434251;
        font-weight: 300;
    }

    input[type="color"] {
        width: 40px;
        border: 1px solid black;
        margin: 0px;
        padding: 0px !important;
        height: 40px;
    }
</style>

<body>
    <div id="app" v-bind:style="{backgroundColor: color}">
        <h1>Viridis</h1>
        <p>Id: {{ id }}</p>
        <p>Color: {{ color }}</p>
        <p>Latitude: {{ lat }}</p>
        <p>Longitude: {{ long }}</p>
        <div class="color">
            <input type="color" v-model="color" />
        </div>
        <div class="send">
            <button v-on:click="send">send</button>
        </div>
    </div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.26/vue.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script lang="javascript">
    new Vue({
        el: '#app',
        props: ['lat', 'long', 'color', 'wsColor', 'socket'],
        created() {
            this.id = this.uuidv4();
            const gColor = this.getColor(this.id);
            gColor.then((c) => { this.color = '#' + c });

            this.socket = new WebSocket('ws://127.0.0.1:9099/ws/color');

            this.socket.onmessage = (event) => {
                const msg = JSON.parse(event.data);
                this.color = '#' + msg.color
            };

            const posSuccess = (position) => {
                this.lat = position.coords.latitude;
                this.long = position.coords.longitude;
            };

            const posError = (err) => {
                console.log(error)
            };

            // This will open permission popup
            navigator.geolocation.getCurrentPosition(posSuccess, posError);
        },
        methods: {
            uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            },
            async getColor(id) {
                const response = await axios.get('/api/color?id=' + id);
                return response.data.color;
            },
            async send() {
                const model = {
                    id: this.id,
                    lat: this.lat,
                    long: this.long,
                    color: this.color.replace("#", '')
                };
                await this.sendMessage(JSON.stringify(model));
            },
            waitForOpenConnection: function () {
                // We use this to measure how many times we have tried to connect to the websocket server
                // If it fails, it throws an error.
                return new Promise((resolve, reject) => {
                    const maxNumberOfAttempts = 10
                    const intervalTime = 200

                    let currentAttempt = 0
                    const interval = setInterval(() => {
                        if (currentAttempt > maxNumberOfAttempts - 1) {
                            clearInterval(interval)
                            reject(new Error('Maximum number of attempts exceeded.'));
                        } else if (this.socket.readyState === this.socket.OPEN) {
                            clearInterval(interval)
                            resolve()
                        }
                        currentAttempt++
                    }, intervalTime)
                })
            },
            sendMessage: async function (message) {
                // We use a custom send message function, so that we can maintain reliable connection with the
                // websocket server.
                if (this.socket.readyState !== this.socket.OPEN) {
                    try {
                        await this.waitForOpenConnection(this.socket)
                        this.socket.send(message)
                    } catch (err) { console.error(err) }
                } else {
                    this.socket.send(message)
                }
            }

        }
    })
</script>

</html>